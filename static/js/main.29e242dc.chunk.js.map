{"version":3,"sources":["components/Calculator/Calculator.js","components/App.js","reportWebVitals.js","index.js"],"names":["Calculator","useState","toFixed","billInput","setBillInput","tipInput","setTipInput","peopleInput","setPeopleInput","billValue","parseFloat","tipValue","numPeople","parseInt","billDisplay","tipDisplay","className","type","value","onChange","e","target","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6QA4CeA,MAzCf,WAAuB,IAAD,EACcC,mBAAS,IAAMC,QAAQ,IADrC,mBACbC,EADa,KACFC,EADE,OAEYH,mBAAS,IAFrB,mBAEbI,EAFa,KAEHC,EAFG,OAGkBL,mBAAS,GAH3B,mBAGbM,EAHa,KAGAC,EAHA,KAKdC,EAAYC,WAAWP,GACvBQ,EAAWD,WAAWL,GACtBO,EAAYC,SAASN,GAErBO,EAAcL,GAAa,EAAIE,EAAS,KAAOC,EAC/CG,EAAaN,GAAaE,EAAS,KAAOC,EAEhD,OACE,uBAAMI,UAAU,aAAhB,UACE,gDACA,kDACA,qBAAKA,UAAU,UAAf,SAAyB,iCAASF,EAAYZ,QAAQ,OACtD,gDACA,qBAAKc,UAAU,UAAf,SAA0BD,EAAWb,QAAQ,KAC7C,sCACA,uBACEe,KAAK,OACLC,MAAOf,EACPgB,SAAU,SAACC,GAAOhB,EAAagB,EAAEC,OAAOH,UAE1C,gDACA,uBACED,KAAK,OACLC,MAAOb,EACPc,SAAU,SAACC,GAAOd,EAAYc,EAAEC,OAAOH,UAEzC,kDACA,uBACED,KAAK,OACLC,MAAOX,EACPY,SAAU,SAACC,GAAOZ,EAAeY,EAAEC,OAAOH,cC3BnCI,MARf,WACE,OACE,qBAAKN,UAAU,MAAf,SACE,cAAC,EAAD,OCMSO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.29e242dc.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport './Calculator.css';\n\nfunction Calculator() {\n  const [billInput, setBillInput] = useState(10.00.toFixed(2));\n  const [tipInput, setTipInput] = useState(15);\n  const [peopleInput, setPeopleInput] = useState(2);\n\n  const billValue = parseFloat(billInput);\n  const tipValue = parseFloat(tipInput);\n  const numPeople = parseInt(peopleInput);\n\n  const billDisplay = billValue * (1 + tipValue/100) / numPeople;\n  const tipDisplay = billValue * (tipValue/100) / numPeople;\n\n  return (\n    <main className=\"Calculator\">\n      <h1>Tip Calculator</h1>\n      <p>Total Per Person:</p>\n      <div className=\"display\"><strong>{billDisplay.toFixed(2)}</strong></div>\n      <p>Tip Per Person:</p>\n      <div className=\"display\">{tipDisplay.toFixed(2)}</div>\n      <p>Bill:</p>\n      <input\n        type=\"text\"\n        value={billInput}\n        onChange={(e) => {setBillInput(e.target.value)}}\n      />\n      <p>Tip Percentage:</p>\n      <input\n        type=\"text\"\n        value={tipInput}\n        onChange={(e) => {setTipInput(e.target.value)}}\n      />\n      <p>Number of People:</p>\n      <input\n        type=\"text\"\n        value={peopleInput}\n        onChange={(e) => {setPeopleInput(e.target.value)}}\n      />\n    </main>\n  );\n}\n\nexport default Calculator\n","import './App.css';\nimport Calculator from './Calculator/Calculator.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}